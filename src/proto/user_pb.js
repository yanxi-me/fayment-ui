/* eslint-disable */ // source: user.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var base_pb = require('./base_pb.js');
goog.object.extend(proto, base_pb);
goog.exportSymbol('proto.fayment.AddCoinAccountReq', null, global);
goog.exportSymbol('proto.fayment.AddFuturesArbitrageReq', null, global);
goog.exportSymbol('proto.fayment.AddFuturesTradeReq', null, global);
goog.exportSymbol('proto.fayment.AddGroupReq', null, global);
goog.exportSymbol('proto.fayment.AddStockAccountReq', null, global);
goog.exportSymbol('proto.fayment.AddStockTradeReq', null, global);
goog.exportSymbol('proto.fayment.AddTradeReq', null, global);
goog.exportSymbol('proto.fayment.ChangeGroupReq', null, global);
goog.exportSymbol('proto.fayment.CloseFuturesArbitrageReq', null, global);
goog.exportSymbol('proto.fayment.CloseFuturesTradeReq', null, global);
goog.exportSymbol('proto.fayment.CloseStockTradeReq', null, global);
goog.exportSymbol('proto.fayment.CloseTradeReq', null, global);
goog.exportSymbol('proto.fayment.CoinAccountDTO', null, global);
goog.exportSymbol('proto.fayment.CoinAccountLogDTO', null, global);
goog.exportSymbol('proto.fayment.CoinAccountLogsDTO', null, global);
goog.exportSymbol('proto.fayment.CoinAccountsDTO', null, global);
goog.exportSymbol('proto.fayment.FuturesArbitrageDTO', null, global);
goog.exportSymbol('proto.fayment.FuturesArbitragesDTO', null, global);
goog.exportSymbol('proto.fayment.FuturesTradeDTO', null, global);
goog.exportSymbol('proto.fayment.FuturesTradesDTO', null, global);
goog.exportSymbol('proto.fayment.GetUserKvReq', null, global);
goog.exportSymbol('proto.fayment.GroupDTO', null, global);
goog.exportSymbol('proto.fayment.GroupsDTO', null, global);
goog.exportSymbol('proto.fayment.ListAccountLogsReq', null, global);
goog.exportSymbol('proto.fayment.ListGroupsReq', null, global);
goog.exportSymbol('proto.fayment.LoginReq', null, global);
goog.exportSymbol('proto.fayment.LoginRes', null, global);
goog.exportSymbol('proto.fayment.StockAccountDTO', null, global);
goog.exportSymbol('proto.fayment.StockAccountLogDTO', null, global);
goog.exportSymbol('proto.fayment.StockAccountLogsDTO', null, global);
goog.exportSymbol('proto.fayment.StockAccountsDTO', null, global);
goog.exportSymbol('proto.fayment.StockTradeDTO', null, global);
goog.exportSymbol('proto.fayment.StockTradesDTO', null, global);
goog.exportSymbol('proto.fayment.SwitchOrderReq', null, global);
goog.exportSymbol('proto.fayment.TradeDTO', null, global);
goog.exportSymbol('proto.fayment.TradesDTO', null, global);
goog.exportSymbol('proto.fayment.UpdateFuturesArbitrageReq', null, global);
goog.exportSymbol('proto.fayment.UpdateFuturesTradeReq', null, global);
goog.exportSymbol('proto.fayment.UserKvDTO', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.LoginReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.LoginReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.LoginReq.displayName = 'proto.fayment.LoginReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.LoginRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.LoginRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.LoginRes.displayName = 'proto.fayment.LoginRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.GetUserKvReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.GetUserKvReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.GetUserKvReq.displayName = 'proto.fayment.GetUserKvReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.UserKvDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.UserKvDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.UserKvDTO.displayName = 'proto.fayment.UserKvDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.AddGroupReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.AddGroupReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.AddGroupReq.displayName = 'proto.fayment.AddGroupReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.ListGroupsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.ListGroupsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.ListGroupsReq.displayName = 'proto.fayment.ListGroupsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.GroupDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.GroupDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.GroupDTO.displayName = 'proto.fayment.GroupDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.GroupsDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fayment.GroupsDTO.repeatedFields_, null);
};
goog.inherits(proto.fayment.GroupsDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.GroupsDTO.displayName = 'proto.fayment.GroupsDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.SwitchOrderReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.SwitchOrderReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.SwitchOrderReq.displayName = 'proto.fayment.SwitchOrderReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.ChangeGroupReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.ChangeGroupReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.ChangeGroupReq.displayName = 'proto.fayment.ChangeGroupReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.AddCoinAccountReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.AddCoinAccountReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.AddCoinAccountReq.displayName = 'proto.fayment.AddCoinAccountReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.CoinAccountDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.CoinAccountDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.CoinAccountDTO.displayName = 'proto.fayment.CoinAccountDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.CoinAccountsDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fayment.CoinAccountsDTO.repeatedFields_, null);
};
goog.inherits(proto.fayment.CoinAccountsDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.CoinAccountsDTO.displayName = 'proto.fayment.CoinAccountsDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.ListAccountLogsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.ListAccountLogsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.ListAccountLogsReq.displayName = 'proto.fayment.ListAccountLogsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.CoinAccountLogDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.CoinAccountLogDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.CoinAccountLogDTO.displayName = 'proto.fayment.CoinAccountLogDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.CoinAccountLogsDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fayment.CoinAccountLogsDTO.repeatedFields_, null);
};
goog.inherits(proto.fayment.CoinAccountLogsDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.CoinAccountLogsDTO.displayName = 'proto.fayment.CoinAccountLogsDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.AddStockAccountReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.AddStockAccountReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.AddStockAccountReq.displayName = 'proto.fayment.AddStockAccountReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.StockAccountDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.StockAccountDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.StockAccountDTO.displayName = 'proto.fayment.StockAccountDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.StockAccountsDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fayment.StockAccountsDTO.repeatedFields_, null);
};
goog.inherits(proto.fayment.StockAccountsDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.StockAccountsDTO.displayName = 'proto.fayment.StockAccountsDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.StockAccountLogDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.StockAccountLogDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.StockAccountLogDTO.displayName = 'proto.fayment.StockAccountLogDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.StockAccountLogsDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fayment.StockAccountLogsDTO.repeatedFields_, null);
};
goog.inherits(proto.fayment.StockAccountLogsDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.StockAccountLogsDTO.displayName = 'proto.fayment.StockAccountLogsDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.AddTradeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.AddTradeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.AddTradeReq.displayName = 'proto.fayment.AddTradeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.CloseTradeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.CloseTradeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.CloseTradeReq.displayName = 'proto.fayment.CloseTradeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.TradeDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.TradeDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.TradeDTO.displayName = 'proto.fayment.TradeDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.TradesDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fayment.TradesDTO.repeatedFields_, null);
};
goog.inherits(proto.fayment.TradesDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.TradesDTO.displayName = 'proto.fayment.TradesDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.AddStockTradeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.AddStockTradeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.AddStockTradeReq.displayName = 'proto.fayment.AddStockTradeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.CloseStockTradeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.CloseStockTradeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.CloseStockTradeReq.displayName = 'proto.fayment.CloseStockTradeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.StockTradeDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.StockTradeDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.StockTradeDTO.displayName = 'proto.fayment.StockTradeDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.StockTradesDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fayment.StockTradesDTO.repeatedFields_, null);
};
goog.inherits(proto.fayment.StockTradesDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.StockTradesDTO.displayName = 'proto.fayment.StockTradesDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.AddFuturesTradeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.AddFuturesTradeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.AddFuturesTradeReq.displayName = 'proto.fayment.AddFuturesTradeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.UpdateFuturesTradeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.UpdateFuturesTradeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.UpdateFuturesTradeReq.displayName = 'proto.fayment.UpdateFuturesTradeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.CloseFuturesTradeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.CloseFuturesTradeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.CloseFuturesTradeReq.displayName = 'proto.fayment.CloseFuturesTradeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.FuturesTradeDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.FuturesTradeDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.FuturesTradeDTO.displayName = 'proto.fayment.FuturesTradeDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.FuturesTradesDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fayment.FuturesTradesDTO.repeatedFields_, null);
};
goog.inherits(proto.fayment.FuturesTradesDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.FuturesTradesDTO.displayName = 'proto.fayment.FuturesTradesDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.AddFuturesArbitrageReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.AddFuturesArbitrageReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.AddFuturesArbitrageReq.displayName = 'proto.fayment.AddFuturesArbitrageReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.UpdateFuturesArbitrageReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.UpdateFuturesArbitrageReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.UpdateFuturesArbitrageReq.displayName = 'proto.fayment.UpdateFuturesArbitrageReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.CloseFuturesArbitrageReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.CloseFuturesArbitrageReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.CloseFuturesArbitrageReq.displayName = 'proto.fayment.CloseFuturesArbitrageReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.FuturesArbitrageDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fayment.FuturesArbitrageDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.FuturesArbitrageDTO.displayName = 'proto.fayment.FuturesArbitrageDTO';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fayment.FuturesArbitragesDTO = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fayment.FuturesArbitragesDTO.repeatedFields_, null);
};
goog.inherits(proto.fayment.FuturesArbitragesDTO, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fayment.FuturesArbitragesDTO.displayName = 'proto.fayment.FuturesArbitragesDTO';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.LoginReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.LoginReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.LoginReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.LoginReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.LoginReq}
 */
proto.fayment.LoginReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.LoginReq;
  return proto.fayment.LoginReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.LoginReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.LoginReq}
 */
proto.fayment.LoginReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.LoginReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.LoginReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.LoginReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.LoginReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.fayment.LoginReq.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.LoginReq} returns this
 */
proto.fayment.LoginReq.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.fayment.LoginReq.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.LoginReq} returns this
 */
proto.fayment.LoginReq.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.LoginRes.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.LoginRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.LoginRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.LoginRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.LoginRes}
 */
proto.fayment.LoginRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.LoginRes;
  return proto.fayment.LoginRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.LoginRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.LoginRes}
 */
proto.fayment.LoginRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.LoginRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.LoginRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.LoginRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.LoginRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.fayment.LoginRes.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.LoginRes} returns this
 */
proto.fayment.LoginRes.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.fayment.LoginRes.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.LoginRes} returns this
 */
proto.fayment.LoginRes.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.GetUserKvReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.GetUserKvReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.GetUserKvReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.GetUserKvReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.GetUserKvReq}
 */
proto.fayment.GetUserKvReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.GetUserKvReq;
  return proto.fayment.GetUserKvReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.GetUserKvReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.GetUserKvReq}
 */
proto.fayment.GetUserKvReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.GetUserKvReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.GetUserKvReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.GetUserKvReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.GetUserKvReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.fayment.GetUserKvReq.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.GetUserKvReq} returns this
 */
proto.fayment.GetUserKvReq.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.UserKvDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.UserKvDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.UserKvDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.UserKvDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createdat: jspb.Message.getFieldWithDefault(msg, 3, 0),
    updatedat: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.UserKvDTO}
 */
proto.fayment.UserKvDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.UserKvDTO;
  return proto.fayment.UserKvDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.UserKvDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.UserKvDTO}
 */
proto.fayment.UserKvDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.UserKvDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.UserKvDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.UserKvDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.UserKvDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreatedat();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getUpdatedat();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.fayment.UserKvDTO.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.UserKvDTO} returns this
 */
proto.fayment.UserKvDTO.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.fayment.UserKvDTO.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.UserKvDTO} returns this
 */
proto.fayment.UserKvDTO.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 createdAt = 3;
 * @return {number}
 */
proto.fayment.UserKvDTO.prototype.getCreatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.UserKvDTO} returns this
 */
proto.fayment.UserKvDTO.prototype.setCreatedat = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 updatedAt = 4;
 * @return {number}
 */
proto.fayment.UserKvDTO.prototype.getUpdatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.UserKvDTO} returns this
 */
proto.fayment.UserKvDTO.prototype.setUpdatedat = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.AddGroupReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.AddGroupReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.AddGroupReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.AddGroupReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    groupType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.AddGroupReq}
 */
proto.fayment.AddGroupReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.AddGroupReq;
  return proto.fayment.AddGroupReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.AddGroupReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.AddGroupReq}
 */
proto.fayment.AddGroupReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.AddGroupReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.AddGroupReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.AddGroupReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.AddGroupReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroupType();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.fayment.AddGroupReq.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.AddGroupReq} returns this
 */
proto.fayment.AddGroupReq.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 group_type = 2;
 * @return {number}
 */
proto.fayment.AddGroupReq.prototype.getGroupType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddGroupReq} returns this
 */
proto.fayment.AddGroupReq.prototype.setGroupType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.ListGroupsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.ListGroupsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.ListGroupsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.ListGroupsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.ListGroupsReq}
 */
proto.fayment.ListGroupsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.ListGroupsReq;
  return proto.fayment.ListGroupsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.ListGroupsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.ListGroupsReq}
 */
proto.fayment.ListGroupsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.ListGroupsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.ListGroupsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.ListGroupsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.ListGroupsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.fayment.ListGroupsReq.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.ListGroupsReq} returns this
 */
proto.fayment.ListGroupsReq.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.GroupDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.GroupDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.GroupDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.GroupDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.GroupDTO}
 */
proto.fayment.GroupDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.GroupDTO;
  return proto.fayment.GroupDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.GroupDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.GroupDTO}
 */
proto.fayment.GroupDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.GroupDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.GroupDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.GroupDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.GroupDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.fayment.GroupDTO.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.GroupDTO} returns this
 */
proto.fayment.GroupDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.fayment.GroupDTO.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.GroupDTO} returns this
 */
proto.fayment.GroupDTO.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fayment.GroupsDTO.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.GroupsDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.GroupsDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.GroupsDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.GroupsDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.fayment.GroupDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.GroupsDTO}
 */
proto.fayment.GroupsDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.GroupsDTO;
  return proto.fayment.GroupsDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.GroupsDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.GroupsDTO}
 */
proto.fayment.GroupsDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fayment.GroupDTO;
      reader.readMessage(value,proto.fayment.GroupDTO.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.GroupsDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.GroupsDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.GroupsDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.GroupsDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fayment.GroupDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GroupDTO groups = 1;
 * @return {!Array<!proto.fayment.GroupDTO>}
 */
proto.fayment.GroupsDTO.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.fayment.GroupDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fayment.GroupDTO, 1));
};


/**
 * @param {!Array<!proto.fayment.GroupDTO>} value
 * @return {!proto.fayment.GroupsDTO} returns this
*/
proto.fayment.GroupsDTO.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fayment.GroupDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fayment.GroupDTO}
 */
proto.fayment.GroupsDTO.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fayment.GroupDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fayment.GroupsDTO} returns this
 */
proto.fayment.GroupsDTO.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.SwitchOrderReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.SwitchOrderReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.SwitchOrderReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.SwitchOrderReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    idA: jspb.Message.getFieldWithDefault(msg, 1, 0),
    idB: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.SwitchOrderReq}
 */
proto.fayment.SwitchOrderReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.SwitchOrderReq;
  return proto.fayment.SwitchOrderReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.SwitchOrderReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.SwitchOrderReq}
 */
proto.fayment.SwitchOrderReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdA(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.SwitchOrderReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.SwitchOrderReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.SwitchOrderReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.SwitchOrderReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdA();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIdB();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 id_a = 1;
 * @return {number}
 */
proto.fayment.SwitchOrderReq.prototype.getIdA = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.SwitchOrderReq} returns this
 */
proto.fayment.SwitchOrderReq.prototype.setIdA = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 id_b = 2;
 * @return {number}
 */
proto.fayment.SwitchOrderReq.prototype.getIdB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.SwitchOrderReq} returns this
 */
proto.fayment.SwitchOrderReq.prototype.setIdB = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.ChangeGroupReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.ChangeGroupReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.ChangeGroupReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.ChangeGroupReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    toGroupId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.ChangeGroupReq}
 */
proto.fayment.ChangeGroupReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.ChangeGroupReq;
  return proto.fayment.ChangeGroupReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.ChangeGroupReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.ChangeGroupReq}
 */
proto.fayment.ChangeGroupReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setToGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.ChangeGroupReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.ChangeGroupReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.ChangeGroupReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.ChangeGroupReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getToGroupId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.fayment.ChangeGroupReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.ChangeGroupReq} returns this
 */
proto.fayment.ChangeGroupReq.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 to_group_id = 3;
 * @return {number}
 */
proto.fayment.ChangeGroupReq.prototype.getToGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.ChangeGroupReq} returns this
 */
proto.fayment.ChangeGroupReq.prototype.setToGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.AddCoinAccountReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.AddCoinAccountReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.AddCoinAccountReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.AddCoinAccountReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sym: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.AddCoinAccountReq}
 */
proto.fayment.AddCoinAccountReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.AddCoinAccountReq;
  return proto.fayment.AddCoinAccountReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.AddCoinAccountReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.AddCoinAccountReq}
 */
proto.fayment.AddCoinAccountReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSym(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.AddCoinAccountReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.AddCoinAccountReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.AddCoinAccountReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.AddCoinAccountReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSym();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional int32 group_id = 1;
 * @return {number}
 */
proto.fayment.AddCoinAccountReq.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddCoinAccountReq} returns this
 */
proto.fayment.AddCoinAccountReq.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.fayment.AddCoinAccountReq.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.AddCoinAccountReq} returns this
 */
proto.fayment.AddCoinAccountReq.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sym = 3;
 * @return {string}
 */
proto.fayment.AddCoinAccountReq.prototype.getSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.AddCoinAccountReq} returns this
 */
proto.fayment.AddCoinAccountReq.prototype.setSym = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double amount = 4;
 * @return {number}
 */
proto.fayment.AddCoinAccountReq.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddCoinAccountReq} returns this
 */
proto.fayment.AddCoinAccountReq.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.CoinAccountDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.CoinAccountDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.CoinAccountDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.CoinAccountDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sym: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.CoinAccountDTO}
 */
proto.fayment.CoinAccountDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.CoinAccountDTO;
  return proto.fayment.CoinAccountDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.CoinAccountDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.CoinAccountDTO}
 */
proto.fayment.CoinAccountDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSym(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.CoinAccountDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.CoinAccountDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.CoinAccountDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.CoinAccountDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSym();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.fayment.CoinAccountDTO.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CoinAccountDTO} returns this
 */
proto.fayment.CoinAccountDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.fayment.CoinAccountDTO.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.CoinAccountDTO} returns this
 */
proto.fayment.CoinAccountDTO.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sym = 3;
 * @return {string}
 */
proto.fayment.CoinAccountDTO.prototype.getSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.CoinAccountDTO} returns this
 */
proto.fayment.CoinAccountDTO.prototype.setSym = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double amount = 4;
 * @return {number}
 */
proto.fayment.CoinAccountDTO.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CoinAccountDTO} returns this
 */
proto.fayment.CoinAccountDTO.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fayment.CoinAccountsDTO.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.CoinAccountsDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.CoinAccountsDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.CoinAccountsDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.CoinAccountsDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountsList: jspb.Message.toObjectList(msg.getAccountsList(),
    proto.fayment.CoinAccountDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.CoinAccountsDTO}
 */
proto.fayment.CoinAccountsDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.CoinAccountsDTO;
  return proto.fayment.CoinAccountsDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.CoinAccountsDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.CoinAccountsDTO}
 */
proto.fayment.CoinAccountsDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fayment.CoinAccountDTO;
      reader.readMessage(value,proto.fayment.CoinAccountDTO.deserializeBinaryFromReader);
      msg.addAccounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.CoinAccountsDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.CoinAccountsDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.CoinAccountsDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.CoinAccountsDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fayment.CoinAccountDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CoinAccountDTO accounts = 1;
 * @return {!Array<!proto.fayment.CoinAccountDTO>}
 */
proto.fayment.CoinAccountsDTO.prototype.getAccountsList = function() {
  return /** @type{!Array<!proto.fayment.CoinAccountDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fayment.CoinAccountDTO, 1));
};


/**
 * @param {!Array<!proto.fayment.CoinAccountDTO>} value
 * @return {!proto.fayment.CoinAccountsDTO} returns this
*/
proto.fayment.CoinAccountsDTO.prototype.setAccountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fayment.CoinAccountDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fayment.CoinAccountDTO}
 */
proto.fayment.CoinAccountsDTO.prototype.addAccounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fayment.CoinAccountDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fayment.CoinAccountsDTO} returns this
 */
proto.fayment.CoinAccountsDTO.prototype.clearAccountsList = function() {
  return this.setAccountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.ListAccountLogsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.ListAccountLogsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.ListAccountLogsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.ListAccountLogsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    max: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fromId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.ListAccountLogsReq}
 */
proto.fayment.ListAccountLogsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.ListAccountLogsReq;
  return proto.fayment.ListAccountLogsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.ListAccountLogsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.ListAccountLogsReq}
 */
proto.fayment.ListAccountLogsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMax(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFromId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.ListAccountLogsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.ListAccountLogsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.ListAccountLogsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.ListAccountLogsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMax();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFromId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 account_id = 1;
 * @return {number}
 */
proto.fayment.ListAccountLogsReq.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.ListAccountLogsReq} returns this
 */
proto.fayment.ListAccountLogsReq.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 max = 2;
 * @return {number}
 */
proto.fayment.ListAccountLogsReq.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.ListAccountLogsReq} returns this
 */
proto.fayment.ListAccountLogsReq.prototype.setMax = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 from_id = 3;
 * @return {number}
 */
proto.fayment.ListAccountLogsReq.prototype.getFromId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.ListAccountLogsReq} returns this
 */
proto.fayment.ListAccountLogsReq.prototype.setFromId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.CoinAccountLogDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.CoinAccountLogDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.CoinAccountLogDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.CoinAccountLogDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sym: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    createdAt: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.CoinAccountLogDTO}
 */
proto.fayment.CoinAccountLogDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.CoinAccountLogDTO;
  return proto.fayment.CoinAccountLogDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.CoinAccountLogDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.CoinAccountLogDTO}
 */
proto.fayment.CoinAccountLogDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSym(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.CoinAccountLogDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.CoinAccountLogDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.CoinAccountLogDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.CoinAccountLogDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSym();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.fayment.CoinAccountLogDTO.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CoinAccountLogDTO} returns this
 */
proto.fayment.CoinAccountLogDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.fayment.CoinAccountLogDTO.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.CoinAccountLogDTO} returns this
 */
proto.fayment.CoinAccountLogDTO.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sym = 3;
 * @return {string}
 */
proto.fayment.CoinAccountLogDTO.prototype.getSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.CoinAccountLogDTO} returns this
 */
proto.fayment.CoinAccountLogDTO.prototype.setSym = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double amount = 4;
 * @return {number}
 */
proto.fayment.CoinAccountLogDTO.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CoinAccountLogDTO} returns this
 */
proto.fayment.CoinAccountLogDTO.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional int64 created_at = 5;
 * @return {number}
 */
proto.fayment.CoinAccountLogDTO.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CoinAccountLogDTO} returns this
 */
proto.fayment.CoinAccountLogDTO.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fayment.CoinAccountLogsDTO.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.CoinAccountLogsDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.CoinAccountLogsDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.CoinAccountLogsDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.CoinAccountLogsDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.fayment.CoinAccountLogDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.CoinAccountLogsDTO}
 */
proto.fayment.CoinAccountLogsDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.CoinAccountLogsDTO;
  return proto.fayment.CoinAccountLogsDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.CoinAccountLogsDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.CoinAccountLogsDTO}
 */
proto.fayment.CoinAccountLogsDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fayment.CoinAccountLogDTO;
      reader.readMessage(value,proto.fayment.CoinAccountLogDTO.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.CoinAccountLogsDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.CoinAccountLogsDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.CoinAccountLogsDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.CoinAccountLogsDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fayment.CoinAccountLogDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CoinAccountLogDTO logs = 1;
 * @return {!Array<!proto.fayment.CoinAccountLogDTO>}
 */
proto.fayment.CoinAccountLogsDTO.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.fayment.CoinAccountLogDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fayment.CoinAccountLogDTO, 1));
};


/**
 * @param {!Array<!proto.fayment.CoinAccountLogDTO>} value
 * @return {!proto.fayment.CoinAccountLogsDTO} returns this
*/
proto.fayment.CoinAccountLogsDTO.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fayment.CoinAccountLogDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fayment.CoinAccountLogDTO}
 */
proto.fayment.CoinAccountLogsDTO.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fayment.CoinAccountLogDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fayment.CoinAccountLogsDTO} returns this
 */
proto.fayment.CoinAccountLogsDTO.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.AddStockAccountReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.AddStockAccountReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.AddStockAccountReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.AddStockAccountReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sym: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    num: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.AddStockAccountReq}
 */
proto.fayment.AddStockAccountReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.AddStockAccountReq;
  return proto.fayment.AddStockAccountReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.AddStockAccountReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.AddStockAccountReq}
 */
proto.fayment.AddStockAccountReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSym(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.AddStockAccountReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.AddStockAccountReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.AddStockAccountReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.AddStockAccountReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSym();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNum();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional int32 group_id = 1;
 * @return {number}
 */
proto.fayment.AddStockAccountReq.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddStockAccountReq} returns this
 */
proto.fayment.AddStockAccountReq.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string sym = 2;
 * @return {string}
 */
proto.fayment.AddStockAccountReq.prototype.getSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.AddStockAccountReq} returns this
 */
proto.fayment.AddStockAccountReq.prototype.setSym = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.fayment.AddStockAccountReq.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.AddStockAccountReq} returns this
 */
proto.fayment.AddStockAccountReq.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double num = 4;
 * @return {number}
 */
proto.fayment.AddStockAccountReq.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddStockAccountReq} returns this
 */
proto.fayment.AddStockAccountReq.prototype.setNum = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.StockAccountDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.StockAccountDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.StockAccountDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.StockAccountDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    site: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sym: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    num: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.StockAccountDTO}
 */
proto.fayment.StockAccountDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.StockAccountDTO;
  return proto.fayment.StockAccountDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.StockAccountDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.StockAccountDTO}
 */
proto.fayment.StockAccountDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSite(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSym(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.StockAccountDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.StockAccountDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.StockAccountDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.StockAccountDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSite();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSym();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNum();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.fayment.StockAccountDTO.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.StockAccountDTO} returns this
 */
proto.fayment.StockAccountDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string site = 2;
 * @return {string}
 */
proto.fayment.StockAccountDTO.prototype.getSite = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.StockAccountDTO} returns this
 */
proto.fayment.StockAccountDTO.prototype.setSite = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sym = 3;
 * @return {string}
 */
proto.fayment.StockAccountDTO.prototype.getSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.StockAccountDTO} returns this
 */
proto.fayment.StockAccountDTO.prototype.setSym = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.fayment.StockAccountDTO.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.StockAccountDTO} returns this
 */
proto.fayment.StockAccountDTO.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double num = 5;
 * @return {number}
 */
proto.fayment.StockAccountDTO.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.StockAccountDTO} returns this
 */
proto.fayment.StockAccountDTO.prototype.setNum = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fayment.StockAccountsDTO.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.StockAccountsDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.StockAccountsDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.StockAccountsDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.StockAccountsDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountsList: jspb.Message.toObjectList(msg.getAccountsList(),
    proto.fayment.StockAccountDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.StockAccountsDTO}
 */
proto.fayment.StockAccountsDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.StockAccountsDTO;
  return proto.fayment.StockAccountsDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.StockAccountsDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.StockAccountsDTO}
 */
proto.fayment.StockAccountsDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fayment.StockAccountDTO;
      reader.readMessage(value,proto.fayment.StockAccountDTO.deserializeBinaryFromReader);
      msg.addAccounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.StockAccountsDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.StockAccountsDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.StockAccountsDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.StockAccountsDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fayment.StockAccountDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StockAccountDTO accounts = 1;
 * @return {!Array<!proto.fayment.StockAccountDTO>}
 */
proto.fayment.StockAccountsDTO.prototype.getAccountsList = function() {
  return /** @type{!Array<!proto.fayment.StockAccountDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fayment.StockAccountDTO, 1));
};


/**
 * @param {!Array<!proto.fayment.StockAccountDTO>} value
 * @return {!proto.fayment.StockAccountsDTO} returns this
*/
proto.fayment.StockAccountsDTO.prototype.setAccountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fayment.StockAccountDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fayment.StockAccountDTO}
 */
proto.fayment.StockAccountsDTO.prototype.addAccounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fayment.StockAccountDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fayment.StockAccountsDTO} returns this
 */
proto.fayment.StockAccountsDTO.prototype.clearAccountsList = function() {
  return this.setAccountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.StockAccountLogDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.StockAccountLogDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.StockAccountLogDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.StockAccountLogDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    site: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sym: jspb.Message.getFieldWithDefault(msg, 4, ""),
    num: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    createdAt: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.StockAccountLogDTO}
 */
proto.fayment.StockAccountLogDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.StockAccountLogDTO;
  return proto.fayment.StockAccountLogDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.StockAccountLogDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.StockAccountLogDTO}
 */
proto.fayment.StockAccountLogDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSite(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSym(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNum(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.StockAccountLogDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.StockAccountLogDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.StockAccountLogDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.StockAccountLogDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSite();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSym();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNum();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.fayment.StockAccountLogDTO.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.StockAccountLogDTO} returns this
 */
proto.fayment.StockAccountLogDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string site = 2;
 * @return {string}
 */
proto.fayment.StockAccountLogDTO.prototype.getSite = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.StockAccountLogDTO} returns this
 */
proto.fayment.StockAccountLogDTO.prototype.setSite = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.fayment.StockAccountLogDTO.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.StockAccountLogDTO} returns this
 */
proto.fayment.StockAccountLogDTO.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string sym = 4;
 * @return {string}
 */
proto.fayment.StockAccountLogDTO.prototype.getSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.StockAccountLogDTO} returns this
 */
proto.fayment.StockAccountLogDTO.prototype.setSym = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double num = 5;
 * @return {number}
 */
proto.fayment.StockAccountLogDTO.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.StockAccountLogDTO} returns this
 */
proto.fayment.StockAccountLogDTO.prototype.setNum = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional int64 created_at = 6;
 * @return {number}
 */
proto.fayment.StockAccountLogDTO.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.StockAccountLogDTO} returns this
 */
proto.fayment.StockAccountLogDTO.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fayment.StockAccountLogsDTO.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.StockAccountLogsDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.StockAccountLogsDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.StockAccountLogsDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.StockAccountLogsDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.fayment.StockAccountLogDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.StockAccountLogsDTO}
 */
proto.fayment.StockAccountLogsDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.StockAccountLogsDTO;
  return proto.fayment.StockAccountLogsDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.StockAccountLogsDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.StockAccountLogsDTO}
 */
proto.fayment.StockAccountLogsDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fayment.StockAccountLogDTO;
      reader.readMessage(value,proto.fayment.StockAccountLogDTO.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.StockAccountLogsDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.StockAccountLogsDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.StockAccountLogsDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.StockAccountLogsDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fayment.StockAccountLogDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StockAccountLogDTO logs = 1;
 * @return {!Array<!proto.fayment.StockAccountLogDTO>}
 */
proto.fayment.StockAccountLogsDTO.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.fayment.StockAccountLogDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fayment.StockAccountLogDTO, 1));
};


/**
 * @param {!Array<!proto.fayment.StockAccountLogDTO>} value
 * @return {!proto.fayment.StockAccountLogsDTO} returns this
*/
proto.fayment.StockAccountLogsDTO.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fayment.StockAccountLogDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fayment.StockAccountLogDTO}
 */
proto.fayment.StockAccountLogsDTO.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fayment.StockAccountLogDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fayment.StockAccountLogsDTO} returns this
 */
proto.fayment.StockAccountLogsDTO.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.AddTradeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.AddTradeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.AddTradeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.AddTradeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradedAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tradeSym: jspb.Message.getFieldWithDefault(msg, 3, ""),
    baseSym: jspb.Message.getFieldWithDefault(msg, 4, ""),
    direction: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tradeAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    baseAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.AddTradeReq}
 */
proto.fayment.AddTradeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.AddTradeReq;
  return proto.fayment.AddTradeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.AddTradeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.AddTradeReq}
 */
proto.fayment.AddTradeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradedAt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradeSym(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseSym(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTradeAmount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBaseAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.AddTradeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.AddTradeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.AddTradeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.AddTradeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTradedAt();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTradeSym();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBaseSym();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTradeAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getBaseAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * optional int32 group_id = 1;
 * @return {number}
 */
proto.fayment.AddTradeReq.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddTradeReq} returns this
 */
proto.fayment.AddTradeReq.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 traded_at = 2;
 * @return {number}
 */
proto.fayment.AddTradeReq.prototype.getTradedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddTradeReq} returns this
 */
proto.fayment.AddTradeReq.prototype.setTradedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string trade_sym = 3;
 * @return {string}
 */
proto.fayment.AddTradeReq.prototype.getTradeSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.AddTradeReq} returns this
 */
proto.fayment.AddTradeReq.prototype.setTradeSym = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string base_sym = 4;
 * @return {string}
 */
proto.fayment.AddTradeReq.prototype.getBaseSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.AddTradeReq} returns this
 */
proto.fayment.AddTradeReq.prototype.setBaseSym = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string direction = 5;
 * @return {string}
 */
proto.fayment.AddTradeReq.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.AddTradeReq} returns this
 */
proto.fayment.AddTradeReq.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional double trade_amount = 6;
 * @return {number}
 */
proto.fayment.AddTradeReq.prototype.getTradeAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddTradeReq} returns this
 */
proto.fayment.AddTradeReq.prototype.setTradeAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double base_amount = 7;
 * @return {number}
 */
proto.fayment.AddTradeReq.prototype.getBaseAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddTradeReq} returns this
 */
proto.fayment.AddTradeReq.prototype.setBaseAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.CloseTradeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.CloseTradeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.CloseTradeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.CloseTradeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    closeAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    closeBaseAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.CloseTradeReq}
 */
proto.fayment.CloseTradeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.CloseTradeReq;
  return proto.fayment.CloseTradeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.CloseTradeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.CloseTradeReq}
 */
proto.fayment.CloseTradeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCloseAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCloseBaseAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.CloseTradeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.CloseTradeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.CloseTradeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.CloseTradeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCloseAt();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCloseBaseAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.fayment.CloseTradeReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CloseTradeReq} returns this
 */
proto.fayment.CloseTradeReq.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 close_at = 2;
 * @return {number}
 */
proto.fayment.CloseTradeReq.prototype.getCloseAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CloseTradeReq} returns this
 */
proto.fayment.CloseTradeReq.prototype.setCloseAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double close_base_amount = 3;
 * @return {number}
 */
proto.fayment.CloseTradeReq.prototype.getCloseBaseAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CloseTradeReq} returns this
 */
proto.fayment.CloseTradeReq.prototype.setCloseBaseAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.TradeDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.TradeDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.TradeDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.TradeDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradedAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tradeSym: jspb.Message.getFieldWithDefault(msg, 3, ""),
    baseSym: jspb.Message.getFieldWithDefault(msg, 4, ""),
    direction: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tradeAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    baseAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    closeAt: jspb.Message.getFieldWithDefault(msg, 8, 0),
    closeBaseAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.TradeDTO}
 */
proto.fayment.TradeDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.TradeDTO;
  return proto.fayment.TradeDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.TradeDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.TradeDTO}
 */
proto.fayment.TradeDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradedAt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradeSym(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseSym(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTradeAmount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBaseAmount(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCloseAt(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCloseBaseAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.TradeDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.TradeDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.TradeDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.TradeDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTradedAt();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTradeSym();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBaseSym();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTradeAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getBaseAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getCloseAt();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getCloseBaseAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.fayment.TradeDTO.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.TradeDTO} returns this
 */
proto.fayment.TradeDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 traded_at = 2;
 * @return {number}
 */
proto.fayment.TradeDTO.prototype.getTradedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.TradeDTO} returns this
 */
proto.fayment.TradeDTO.prototype.setTradedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string trade_sym = 3;
 * @return {string}
 */
proto.fayment.TradeDTO.prototype.getTradeSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.TradeDTO} returns this
 */
proto.fayment.TradeDTO.prototype.setTradeSym = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string base_sym = 4;
 * @return {string}
 */
proto.fayment.TradeDTO.prototype.getBaseSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.TradeDTO} returns this
 */
proto.fayment.TradeDTO.prototype.setBaseSym = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string direction = 5;
 * @return {string}
 */
proto.fayment.TradeDTO.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.TradeDTO} returns this
 */
proto.fayment.TradeDTO.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional double trade_amount = 6;
 * @return {number}
 */
proto.fayment.TradeDTO.prototype.getTradeAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.TradeDTO} returns this
 */
proto.fayment.TradeDTO.prototype.setTradeAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double base_amount = 7;
 * @return {number}
 */
proto.fayment.TradeDTO.prototype.getBaseAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.TradeDTO} returns this
 */
proto.fayment.TradeDTO.prototype.setBaseAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional int32 close_at = 8;
 * @return {number}
 */
proto.fayment.TradeDTO.prototype.getCloseAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.TradeDTO} returns this
 */
proto.fayment.TradeDTO.prototype.setCloseAt = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional double close_base_amount = 9;
 * @return {number}
 */
proto.fayment.TradeDTO.prototype.getCloseBaseAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.TradeDTO} returns this
 */
proto.fayment.TradeDTO.prototype.setCloseBaseAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fayment.TradesDTO.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.TradesDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.TradesDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.TradesDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.TradesDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradesList: jspb.Message.toObjectList(msg.getTradesList(),
    proto.fayment.TradeDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.TradesDTO}
 */
proto.fayment.TradesDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.TradesDTO;
  return proto.fayment.TradesDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.TradesDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.TradesDTO}
 */
proto.fayment.TradesDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fayment.TradeDTO;
      reader.readMessage(value,proto.fayment.TradeDTO.deserializeBinaryFromReader);
      msg.addTrades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.TradesDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.TradesDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.TradesDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.TradesDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fayment.TradeDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TradeDTO trades = 1;
 * @return {!Array<!proto.fayment.TradeDTO>}
 */
proto.fayment.TradesDTO.prototype.getTradesList = function() {
  return /** @type{!Array<!proto.fayment.TradeDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fayment.TradeDTO, 1));
};


/**
 * @param {!Array<!proto.fayment.TradeDTO>} value
 * @return {!proto.fayment.TradesDTO} returns this
*/
proto.fayment.TradesDTO.prototype.setTradesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fayment.TradeDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fayment.TradeDTO}
 */
proto.fayment.TradesDTO.prototype.addTrades = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fayment.TradeDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fayment.TradesDTO} returns this
 */
proto.fayment.TradesDTO.prototype.clearTradesList = function() {
  return this.setTradesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.AddStockTradeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.AddStockTradeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.AddStockTradeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.AddStockTradeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradedAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    stockSym: jspb.Message.getFieldWithDefault(msg, 3, ""),
    stockName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    stockNum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 6, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.AddStockTradeReq}
 */
proto.fayment.AddStockTradeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.AddStockTradeReq;
  return proto.fayment.AddStockTradeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.AddStockTradeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.AddStockTradeReq}
 */
proto.fayment.AddStockTradeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradedAt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStockSym(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStockName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStockNum(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.AddStockTradeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.AddStockTradeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.AddStockTradeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.AddStockTradeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTradedAt();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStockSym();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStockName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStockNum();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * optional int32 group_id = 1;
 * @return {number}
 */
proto.fayment.AddStockTradeReq.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddStockTradeReq} returns this
 */
proto.fayment.AddStockTradeReq.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 traded_at = 2;
 * @return {number}
 */
proto.fayment.AddStockTradeReq.prototype.getTradedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddStockTradeReq} returns this
 */
proto.fayment.AddStockTradeReq.prototype.setTradedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string stock_sym = 3;
 * @return {string}
 */
proto.fayment.AddStockTradeReq.prototype.getStockSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.AddStockTradeReq} returns this
 */
proto.fayment.AddStockTradeReq.prototype.setStockSym = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string stock_name = 4;
 * @return {string}
 */
proto.fayment.AddStockTradeReq.prototype.getStockName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.AddStockTradeReq} returns this
 */
proto.fayment.AddStockTradeReq.prototype.setStockName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 stock_num = 5;
 * @return {number}
 */
proto.fayment.AddStockTradeReq.prototype.getStockNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddStockTradeReq} returns this
 */
proto.fayment.AddStockTradeReq.prototype.setStockNum = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string direction = 6;
 * @return {string}
 */
proto.fayment.AddStockTradeReq.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.AddStockTradeReq} returns this
 */
proto.fayment.AddStockTradeReq.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional double amount = 7;
 * @return {number}
 */
proto.fayment.AddStockTradeReq.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddStockTradeReq} returns this
 */
proto.fayment.AddStockTradeReq.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.CloseStockTradeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.CloseStockTradeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.CloseStockTradeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.CloseStockTradeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    closeAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    closeAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.CloseStockTradeReq}
 */
proto.fayment.CloseStockTradeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.CloseStockTradeReq;
  return proto.fayment.CloseStockTradeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.CloseStockTradeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.CloseStockTradeReq}
 */
proto.fayment.CloseStockTradeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCloseAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCloseAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.CloseStockTradeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.CloseStockTradeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.CloseStockTradeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.CloseStockTradeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCloseAt();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCloseAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.fayment.CloseStockTradeReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CloseStockTradeReq} returns this
 */
proto.fayment.CloseStockTradeReq.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 close_at = 2;
 * @return {number}
 */
proto.fayment.CloseStockTradeReq.prototype.getCloseAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CloseStockTradeReq} returns this
 */
proto.fayment.CloseStockTradeReq.prototype.setCloseAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double close_amount = 3;
 * @return {number}
 */
proto.fayment.CloseStockTradeReq.prototype.getCloseAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CloseStockTradeReq} returns this
 */
proto.fayment.CloseStockTradeReq.prototype.setCloseAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.StockTradeDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.StockTradeDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.StockTradeDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.StockTradeDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradedAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    stockSite: jspb.Message.getFieldWithDefault(msg, 8, ""),
    stockSym: jspb.Message.getFieldWithDefault(msg, 3, ""),
    stockName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    stockNum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 6, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    closeAt: jspb.Message.getFieldWithDefault(msg, 9, 0),
    closeAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.StockTradeDTO}
 */
proto.fayment.StockTradeDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.StockTradeDTO;
  return proto.fayment.StockTradeDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.StockTradeDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.StockTradeDTO}
 */
proto.fayment.StockTradeDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradedAt(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setStockSite(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStockSym(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStockName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStockNum(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCloseAt(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCloseAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.StockTradeDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.StockTradeDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.StockTradeDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.StockTradeDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTradedAt();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStockSite();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getStockSym();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStockName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStockNum();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getCloseAt();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getCloseAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.fayment.StockTradeDTO.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.StockTradeDTO} returns this
 */
proto.fayment.StockTradeDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 traded_at = 2;
 * @return {number}
 */
proto.fayment.StockTradeDTO.prototype.getTradedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.StockTradeDTO} returns this
 */
proto.fayment.StockTradeDTO.prototype.setTradedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string stock_site = 8;
 * @return {string}
 */
proto.fayment.StockTradeDTO.prototype.getStockSite = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.StockTradeDTO} returns this
 */
proto.fayment.StockTradeDTO.prototype.setStockSite = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string stock_sym = 3;
 * @return {string}
 */
proto.fayment.StockTradeDTO.prototype.getStockSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.StockTradeDTO} returns this
 */
proto.fayment.StockTradeDTO.prototype.setStockSym = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string stock_name = 4;
 * @return {string}
 */
proto.fayment.StockTradeDTO.prototype.getStockName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.StockTradeDTO} returns this
 */
proto.fayment.StockTradeDTO.prototype.setStockName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 stock_num = 5;
 * @return {number}
 */
proto.fayment.StockTradeDTO.prototype.getStockNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.StockTradeDTO} returns this
 */
proto.fayment.StockTradeDTO.prototype.setStockNum = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string direction = 6;
 * @return {string}
 */
proto.fayment.StockTradeDTO.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.StockTradeDTO} returns this
 */
proto.fayment.StockTradeDTO.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional double amount = 7;
 * @return {number}
 */
proto.fayment.StockTradeDTO.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.StockTradeDTO} returns this
 */
proto.fayment.StockTradeDTO.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional int32 close_at = 9;
 * @return {number}
 */
proto.fayment.StockTradeDTO.prototype.getCloseAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.StockTradeDTO} returns this
 */
proto.fayment.StockTradeDTO.prototype.setCloseAt = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional double close_amount = 10;
 * @return {number}
 */
proto.fayment.StockTradeDTO.prototype.getCloseAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.StockTradeDTO} returns this
 */
proto.fayment.StockTradeDTO.prototype.setCloseAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fayment.StockTradesDTO.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.StockTradesDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.StockTradesDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.StockTradesDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.StockTradesDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradesList: jspb.Message.toObjectList(msg.getTradesList(),
    proto.fayment.StockTradeDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.StockTradesDTO}
 */
proto.fayment.StockTradesDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.StockTradesDTO;
  return proto.fayment.StockTradesDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.StockTradesDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.StockTradesDTO}
 */
proto.fayment.StockTradesDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fayment.StockTradeDTO;
      reader.readMessage(value,proto.fayment.StockTradeDTO.deserializeBinaryFromReader);
      msg.addTrades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.StockTradesDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.StockTradesDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.StockTradesDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.StockTradesDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fayment.StockTradeDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StockTradeDTO trades = 1;
 * @return {!Array<!proto.fayment.StockTradeDTO>}
 */
proto.fayment.StockTradesDTO.prototype.getTradesList = function() {
  return /** @type{!Array<!proto.fayment.StockTradeDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fayment.StockTradeDTO, 1));
};


/**
 * @param {!Array<!proto.fayment.StockTradeDTO>} value
 * @return {!proto.fayment.StockTradesDTO} returns this
*/
proto.fayment.StockTradesDTO.prototype.setTradesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fayment.StockTradeDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fayment.StockTradeDTO}
 */
proto.fayment.StockTradesDTO.prototype.addTrades = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fayment.StockTradeDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fayment.StockTradesDTO} returns this
 */
proto.fayment.StockTradesDTO.prototype.clearTradesList = function() {
  return this.setTradesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.AddFuturesTradeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.AddFuturesTradeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.AddFuturesTradeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.AddFuturesTradeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradedAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    contractSym: jspb.Message.getFieldWithDefault(msg, 3, ""),
    contractPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    contractNum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.AddFuturesTradeReq}
 */
proto.fayment.AddFuturesTradeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.AddFuturesTradeReq;
  return proto.fayment.AddFuturesTradeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.AddFuturesTradeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.AddFuturesTradeReq}
 */
proto.fayment.AddFuturesTradeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradedAt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractSym(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setContractPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContractNum(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.AddFuturesTradeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.AddFuturesTradeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.AddFuturesTradeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.AddFuturesTradeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTradedAt();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getContractSym();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContractPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getContractNum();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 group_id = 1;
 * @return {number}
 */
proto.fayment.AddFuturesTradeReq.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddFuturesTradeReq} returns this
 */
proto.fayment.AddFuturesTradeReq.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 traded_at = 2;
 * @return {number}
 */
proto.fayment.AddFuturesTradeReq.prototype.getTradedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddFuturesTradeReq} returns this
 */
proto.fayment.AddFuturesTradeReq.prototype.setTradedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string contract_sym = 3;
 * @return {string}
 */
proto.fayment.AddFuturesTradeReq.prototype.getContractSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.AddFuturesTradeReq} returns this
 */
proto.fayment.AddFuturesTradeReq.prototype.setContractSym = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double contract_price = 4;
 * @return {number}
 */
proto.fayment.AddFuturesTradeReq.prototype.getContractPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddFuturesTradeReq} returns this
 */
proto.fayment.AddFuturesTradeReq.prototype.setContractPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional int32 contract_num = 5;
 * @return {number}
 */
proto.fayment.AddFuturesTradeReq.prototype.getContractNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddFuturesTradeReq} returns this
 */
proto.fayment.AddFuturesTradeReq.prototype.setContractNum = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string direction = 6;
 * @return {string}
 */
proto.fayment.AddFuturesTradeReq.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.AddFuturesTradeReq} returns this
 */
proto.fayment.AddFuturesTradeReq.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.UpdateFuturesTradeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.UpdateFuturesTradeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.UpdateFuturesTradeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.UpdateFuturesTradeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradedAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    contractSym: jspb.Message.getFieldWithDefault(msg, 3, ""),
    contractPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    contractNum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.UpdateFuturesTradeReq}
 */
proto.fayment.UpdateFuturesTradeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.UpdateFuturesTradeReq;
  return proto.fayment.UpdateFuturesTradeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.UpdateFuturesTradeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.UpdateFuturesTradeReq}
 */
proto.fayment.UpdateFuturesTradeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradedAt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractSym(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setContractPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContractNum(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.UpdateFuturesTradeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.UpdateFuturesTradeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.UpdateFuturesTradeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.UpdateFuturesTradeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTradedAt();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getContractSym();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContractPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getContractNum();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.fayment.UpdateFuturesTradeReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.UpdateFuturesTradeReq} returns this
 */
proto.fayment.UpdateFuturesTradeReq.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 traded_at = 2;
 * @return {number}
 */
proto.fayment.UpdateFuturesTradeReq.prototype.getTradedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.UpdateFuturesTradeReq} returns this
 */
proto.fayment.UpdateFuturesTradeReq.prototype.setTradedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string contract_sym = 3;
 * @return {string}
 */
proto.fayment.UpdateFuturesTradeReq.prototype.getContractSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.UpdateFuturesTradeReq} returns this
 */
proto.fayment.UpdateFuturesTradeReq.prototype.setContractSym = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double contract_price = 4;
 * @return {number}
 */
proto.fayment.UpdateFuturesTradeReq.prototype.getContractPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.UpdateFuturesTradeReq} returns this
 */
proto.fayment.UpdateFuturesTradeReq.prototype.setContractPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional int32 contract_num = 5;
 * @return {number}
 */
proto.fayment.UpdateFuturesTradeReq.prototype.getContractNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.UpdateFuturesTradeReq} returns this
 */
proto.fayment.UpdateFuturesTradeReq.prototype.setContractNum = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string direction = 6;
 * @return {string}
 */
proto.fayment.UpdateFuturesTradeReq.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.UpdateFuturesTradeReq} returns this
 */
proto.fayment.UpdateFuturesTradeReq.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.CloseFuturesTradeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.CloseFuturesTradeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.CloseFuturesTradeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.CloseFuturesTradeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    closeAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    closePrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.CloseFuturesTradeReq}
 */
proto.fayment.CloseFuturesTradeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.CloseFuturesTradeReq;
  return proto.fayment.CloseFuturesTradeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.CloseFuturesTradeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.CloseFuturesTradeReq}
 */
proto.fayment.CloseFuturesTradeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCloseAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setClosePrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.CloseFuturesTradeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.CloseFuturesTradeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.CloseFuturesTradeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.CloseFuturesTradeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCloseAt();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getClosePrice();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.fayment.CloseFuturesTradeReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CloseFuturesTradeReq} returns this
 */
proto.fayment.CloseFuturesTradeReq.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 close_at = 2;
 * @return {number}
 */
proto.fayment.CloseFuturesTradeReq.prototype.getCloseAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CloseFuturesTradeReq} returns this
 */
proto.fayment.CloseFuturesTradeReq.prototype.setCloseAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double close_price = 3;
 * @return {number}
 */
proto.fayment.CloseFuturesTradeReq.prototype.getClosePrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CloseFuturesTradeReq} returns this
 */
proto.fayment.CloseFuturesTradeReq.prototype.setClosePrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.FuturesTradeDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.FuturesTradeDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.FuturesTradeDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.FuturesTradeDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradedAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    contractSym: jspb.Message.getFieldWithDefault(msg, 3, ""),
    varietyName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    contractPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    contractNum: jspb.Message.getFieldWithDefault(msg, 6, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 7, ""),
    tradingUnit: jspb.Message.getFieldWithDefault(msg, 8, 0),
    marginPercent: jspb.Message.getFieldWithDefault(msg, 9, 0),
    closeAt: jspb.Message.getFieldWithDefault(msg, 10, 0),
    closePrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.FuturesTradeDTO}
 */
proto.fayment.FuturesTradeDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.FuturesTradeDTO;
  return proto.fayment.FuturesTradeDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.FuturesTradeDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.FuturesTradeDTO}
 */
proto.fayment.FuturesTradeDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradedAt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractSym(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVarietyName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setContractPrice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContractNum(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradingUnit(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMarginPercent(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCloseAt(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setClosePrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.FuturesTradeDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.FuturesTradeDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.FuturesTradeDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.FuturesTradeDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTradedAt();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getContractSym();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVarietyName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContractPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getContractNum();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTradingUnit();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getMarginPercent();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getCloseAt();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getClosePrice();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.fayment.FuturesTradeDTO.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesTradeDTO} returns this
 */
proto.fayment.FuturesTradeDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 traded_at = 2;
 * @return {number}
 */
proto.fayment.FuturesTradeDTO.prototype.getTradedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesTradeDTO} returns this
 */
proto.fayment.FuturesTradeDTO.prototype.setTradedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string contract_sym = 3;
 * @return {string}
 */
proto.fayment.FuturesTradeDTO.prototype.getContractSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.FuturesTradeDTO} returns this
 */
proto.fayment.FuturesTradeDTO.prototype.setContractSym = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string variety_name = 4;
 * @return {string}
 */
proto.fayment.FuturesTradeDTO.prototype.getVarietyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.FuturesTradeDTO} returns this
 */
proto.fayment.FuturesTradeDTO.prototype.setVarietyName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double contract_price = 5;
 * @return {number}
 */
proto.fayment.FuturesTradeDTO.prototype.getContractPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesTradeDTO} returns this
 */
proto.fayment.FuturesTradeDTO.prototype.setContractPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional int32 contract_num = 6;
 * @return {number}
 */
proto.fayment.FuturesTradeDTO.prototype.getContractNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesTradeDTO} returns this
 */
proto.fayment.FuturesTradeDTO.prototype.setContractNum = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string direction = 7;
 * @return {string}
 */
proto.fayment.FuturesTradeDTO.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.FuturesTradeDTO} returns this
 */
proto.fayment.FuturesTradeDTO.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 trading_unit = 8;
 * @return {number}
 */
proto.fayment.FuturesTradeDTO.prototype.getTradingUnit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesTradeDTO} returns this
 */
proto.fayment.FuturesTradeDTO.prototype.setTradingUnit = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 margin_percent = 9;
 * @return {number}
 */
proto.fayment.FuturesTradeDTO.prototype.getMarginPercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesTradeDTO} returns this
 */
proto.fayment.FuturesTradeDTO.prototype.setMarginPercent = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 close_at = 10;
 * @return {number}
 */
proto.fayment.FuturesTradeDTO.prototype.getCloseAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesTradeDTO} returns this
 */
proto.fayment.FuturesTradeDTO.prototype.setCloseAt = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional double close_price = 11;
 * @return {number}
 */
proto.fayment.FuturesTradeDTO.prototype.getClosePrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesTradeDTO} returns this
 */
proto.fayment.FuturesTradeDTO.prototype.setClosePrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fayment.FuturesTradesDTO.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.FuturesTradesDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.FuturesTradesDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.FuturesTradesDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.FuturesTradesDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradesList: jspb.Message.toObjectList(msg.getTradesList(),
    proto.fayment.FuturesTradeDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.FuturesTradesDTO}
 */
proto.fayment.FuturesTradesDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.FuturesTradesDTO;
  return proto.fayment.FuturesTradesDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.FuturesTradesDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.FuturesTradesDTO}
 */
proto.fayment.FuturesTradesDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fayment.FuturesTradeDTO;
      reader.readMessage(value,proto.fayment.FuturesTradeDTO.deserializeBinaryFromReader);
      msg.addTrades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.FuturesTradesDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.FuturesTradesDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.FuturesTradesDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.FuturesTradesDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fayment.FuturesTradeDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FuturesTradeDTO trades = 1;
 * @return {!Array<!proto.fayment.FuturesTradeDTO>}
 */
proto.fayment.FuturesTradesDTO.prototype.getTradesList = function() {
  return /** @type{!Array<!proto.fayment.FuturesTradeDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fayment.FuturesTradeDTO, 1));
};


/**
 * @param {!Array<!proto.fayment.FuturesTradeDTO>} value
 * @return {!proto.fayment.FuturesTradesDTO} returns this
*/
proto.fayment.FuturesTradesDTO.prototype.setTradesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fayment.FuturesTradeDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fayment.FuturesTradeDTO}
 */
proto.fayment.FuturesTradesDTO.prototype.addTrades = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fayment.FuturesTradeDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fayment.FuturesTradesDTO} returns this
 */
proto.fayment.FuturesTradesDTO.prototype.clearTradesList = function() {
  return this.setTradesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.AddFuturesArbitrageReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.AddFuturesArbitrageReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.AddFuturesArbitrageReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.AddFuturesArbitrageReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradedAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    longContractSym: jspb.Message.getFieldWithDefault(msg, 3, ""),
    longContractPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    longContractNum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    shortContractSym: jspb.Message.getFieldWithDefault(msg, 6, ""),
    shortContractPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    shortContractNum: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.AddFuturesArbitrageReq}
 */
proto.fayment.AddFuturesArbitrageReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.AddFuturesArbitrageReq;
  return proto.fayment.AddFuturesArbitrageReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.AddFuturesArbitrageReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.AddFuturesArbitrageReq}
 */
proto.fayment.AddFuturesArbitrageReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradedAt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLongContractSym(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongContractPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLongContractNum(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortContractSym(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setShortContractPrice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShortContractNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.AddFuturesArbitrageReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.AddFuturesArbitrageReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.AddFuturesArbitrageReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.AddFuturesArbitrageReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTradedAt();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLongContractSym();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLongContractPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getLongContractNum();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getShortContractSym();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getShortContractPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getShortContractNum();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional int32 group_id = 1;
 * @return {number}
 */
proto.fayment.AddFuturesArbitrageReq.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddFuturesArbitrageReq} returns this
 */
proto.fayment.AddFuturesArbitrageReq.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 traded_at = 2;
 * @return {number}
 */
proto.fayment.AddFuturesArbitrageReq.prototype.getTradedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddFuturesArbitrageReq} returns this
 */
proto.fayment.AddFuturesArbitrageReq.prototype.setTradedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string long_contract_sym = 3;
 * @return {string}
 */
proto.fayment.AddFuturesArbitrageReq.prototype.getLongContractSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.AddFuturesArbitrageReq} returns this
 */
proto.fayment.AddFuturesArbitrageReq.prototype.setLongContractSym = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double long_contract_price = 4;
 * @return {number}
 */
proto.fayment.AddFuturesArbitrageReq.prototype.getLongContractPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddFuturesArbitrageReq} returns this
 */
proto.fayment.AddFuturesArbitrageReq.prototype.setLongContractPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional int32 long_contract_num = 5;
 * @return {number}
 */
proto.fayment.AddFuturesArbitrageReq.prototype.getLongContractNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddFuturesArbitrageReq} returns this
 */
proto.fayment.AddFuturesArbitrageReq.prototype.setLongContractNum = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string short_contract_sym = 6;
 * @return {string}
 */
proto.fayment.AddFuturesArbitrageReq.prototype.getShortContractSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.AddFuturesArbitrageReq} returns this
 */
proto.fayment.AddFuturesArbitrageReq.prototype.setShortContractSym = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional double short_contract_price = 7;
 * @return {number}
 */
proto.fayment.AddFuturesArbitrageReq.prototype.getShortContractPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddFuturesArbitrageReq} returns this
 */
proto.fayment.AddFuturesArbitrageReq.prototype.setShortContractPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional int32 short_contract_num = 8;
 * @return {number}
 */
proto.fayment.AddFuturesArbitrageReq.prototype.getShortContractNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.AddFuturesArbitrageReq} returns this
 */
proto.fayment.AddFuturesArbitrageReq.prototype.setShortContractNum = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.UpdateFuturesArbitrageReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.UpdateFuturesArbitrageReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.UpdateFuturesArbitrageReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradedAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    longContractSym: jspb.Message.getFieldWithDefault(msg, 3, ""),
    longContractPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    longContractNum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    shortContractSym: jspb.Message.getFieldWithDefault(msg, 6, ""),
    shortContractPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    shortContractNum: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.UpdateFuturesArbitrageReq}
 */
proto.fayment.UpdateFuturesArbitrageReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.UpdateFuturesArbitrageReq;
  return proto.fayment.UpdateFuturesArbitrageReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.UpdateFuturesArbitrageReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.UpdateFuturesArbitrageReq}
 */
proto.fayment.UpdateFuturesArbitrageReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradedAt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLongContractSym(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongContractPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLongContractNum(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortContractSym(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setShortContractPrice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShortContractNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.UpdateFuturesArbitrageReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.UpdateFuturesArbitrageReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.UpdateFuturesArbitrageReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTradedAt();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLongContractSym();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLongContractPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getLongContractNum();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getShortContractSym();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getShortContractPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getShortContractNum();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.UpdateFuturesArbitrageReq} returns this
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 traded_at = 2;
 * @return {number}
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.getTradedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.UpdateFuturesArbitrageReq} returns this
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.setTradedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string long_contract_sym = 3;
 * @return {string}
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.getLongContractSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.UpdateFuturesArbitrageReq} returns this
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.setLongContractSym = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double long_contract_price = 4;
 * @return {number}
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.getLongContractPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.UpdateFuturesArbitrageReq} returns this
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.setLongContractPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional int32 long_contract_num = 5;
 * @return {number}
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.getLongContractNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.UpdateFuturesArbitrageReq} returns this
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.setLongContractNum = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string short_contract_sym = 6;
 * @return {string}
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.getShortContractSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.UpdateFuturesArbitrageReq} returns this
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.setShortContractSym = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional double short_contract_price = 7;
 * @return {number}
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.getShortContractPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.UpdateFuturesArbitrageReq} returns this
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.setShortContractPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional int32 short_contract_num = 8;
 * @return {number}
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.getShortContractNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.UpdateFuturesArbitrageReq} returns this
 */
proto.fayment.UpdateFuturesArbitrageReq.prototype.setShortContractNum = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.CloseFuturesArbitrageReq.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.CloseFuturesArbitrageReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.CloseFuturesArbitrageReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.CloseFuturesArbitrageReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    closeAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    closeLongPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    closeShortPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.CloseFuturesArbitrageReq}
 */
proto.fayment.CloseFuturesArbitrageReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.CloseFuturesArbitrageReq;
  return proto.fayment.CloseFuturesArbitrageReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.CloseFuturesArbitrageReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.CloseFuturesArbitrageReq}
 */
proto.fayment.CloseFuturesArbitrageReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCloseAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCloseLongPrice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCloseShortPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.CloseFuturesArbitrageReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.CloseFuturesArbitrageReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.CloseFuturesArbitrageReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.CloseFuturesArbitrageReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCloseAt();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCloseLongPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getCloseShortPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.fayment.CloseFuturesArbitrageReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CloseFuturesArbitrageReq} returns this
 */
proto.fayment.CloseFuturesArbitrageReq.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 close_at = 2;
 * @return {number}
 */
proto.fayment.CloseFuturesArbitrageReq.prototype.getCloseAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CloseFuturesArbitrageReq} returns this
 */
proto.fayment.CloseFuturesArbitrageReq.prototype.setCloseAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double close_long_price = 3;
 * @return {number}
 */
proto.fayment.CloseFuturesArbitrageReq.prototype.getCloseLongPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CloseFuturesArbitrageReq} returns this
 */
proto.fayment.CloseFuturesArbitrageReq.prototype.setCloseLongPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double close_short_price = 4;
 * @return {number}
 */
proto.fayment.CloseFuturesArbitrageReq.prototype.getCloseShortPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.CloseFuturesArbitrageReq} returns this
 */
proto.fayment.CloseFuturesArbitrageReq.prototype.setCloseShortPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.FuturesArbitrageDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.FuturesArbitrageDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.FuturesArbitrageDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.FuturesArbitrageDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradedAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    longContractSym: jspb.Message.getFieldWithDefault(msg, 3, ""),
    longContractPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    longContractNum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    shortContractSym: jspb.Message.getFieldWithDefault(msg, 6, ""),
    shortContractPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    shortContractNum: jspb.Message.getFieldWithDefault(msg, 8, 0),
    closeAt: jspb.Message.getFieldWithDefault(msg, 10, 0),
    closeLongPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    closeShortPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    longVarietyName: jspb.Message.getFieldWithDefault(msg, 13, ""),
    longTradingUnit: jspb.Message.getFieldWithDefault(msg, 14, 0),
    longMarginPercent: jspb.Message.getFieldWithDefault(msg, 15, 0),
    shortVarietyName: jspb.Message.getFieldWithDefault(msg, 16, ""),
    shortTradingUnit: jspb.Message.getFieldWithDefault(msg, 17, 0),
    shortMarginPercent: jspb.Message.getFieldWithDefault(msg, 18, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.FuturesArbitrageDTO}
 */
proto.fayment.FuturesArbitrageDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.FuturesArbitrageDTO;
  return proto.fayment.FuturesArbitrageDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.FuturesArbitrageDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.FuturesArbitrageDTO}
 */
proto.fayment.FuturesArbitrageDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradedAt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLongContractSym(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongContractPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLongContractNum(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortContractSym(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setShortContractPrice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShortContractNum(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCloseAt(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCloseLongPrice(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCloseShortPrice(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setLongVarietyName(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLongTradingUnit(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLongMarginPercent(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortVarietyName(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShortTradingUnit(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShortMarginPercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.FuturesArbitrageDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.FuturesArbitrageDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.FuturesArbitrageDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.FuturesArbitrageDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTradedAt();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLongContractSym();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLongContractPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getLongContractNum();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getShortContractSym();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getShortContractPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getShortContractNum();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getCloseAt();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getCloseLongPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getCloseShortPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getLongVarietyName();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getLongTradingUnit();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getLongMarginPercent();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getShortVarietyName();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getShortTradingUnit();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getShortMarginPercent();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 traded_at = 2;
 * @return {number}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getTradedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setTradedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string long_contract_sym = 3;
 * @return {string}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getLongContractSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setLongContractSym = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double long_contract_price = 4;
 * @return {number}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getLongContractPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setLongContractPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional int32 long_contract_num = 5;
 * @return {number}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getLongContractNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setLongContractNum = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string short_contract_sym = 6;
 * @return {string}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getShortContractSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setShortContractSym = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional double short_contract_price = 7;
 * @return {number}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getShortContractPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setShortContractPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional int32 short_contract_num = 8;
 * @return {number}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getShortContractNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setShortContractNum = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 close_at = 10;
 * @return {number}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getCloseAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setCloseAt = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional double close_long_price = 11;
 * @return {number}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getCloseLongPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setCloseLongPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double close_short_price = 12;
 * @return {number}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getCloseShortPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setCloseShortPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional string long_variety_name = 13;
 * @return {string}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getLongVarietyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setLongVarietyName = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional int32 long_trading_unit = 14;
 * @return {number}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getLongTradingUnit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setLongTradingUnit = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 long_margin_percent = 15;
 * @return {number}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getLongMarginPercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setLongMarginPercent = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional string short_variety_name = 16;
 * @return {string}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getShortVarietyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setShortVarietyName = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional int32 short_trading_unit = 17;
 * @return {number}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getShortTradingUnit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setShortTradingUnit = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 short_margin_percent = 18;
 * @return {number}
 */
proto.fayment.FuturesArbitrageDTO.prototype.getShortMarginPercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.fayment.FuturesArbitrageDTO} returns this
 */
proto.fayment.FuturesArbitrageDTO.prototype.setShortMarginPercent = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fayment.FuturesArbitragesDTO.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fayment.FuturesArbitragesDTO.prototype.toObject = function(opt_includeInstance) {
  return proto.fayment.FuturesArbitragesDTO.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fayment.FuturesArbitragesDTO} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.FuturesArbitragesDTO.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradesList: jspb.Message.toObjectList(msg.getTradesList(),
    proto.fayment.FuturesArbitrageDTO.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fayment.FuturesArbitragesDTO}
 */
proto.fayment.FuturesArbitragesDTO.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fayment.FuturesArbitragesDTO;
  return proto.fayment.FuturesArbitragesDTO.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fayment.FuturesArbitragesDTO} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fayment.FuturesArbitragesDTO}
 */
proto.fayment.FuturesArbitragesDTO.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fayment.FuturesArbitrageDTO;
      reader.readMessage(value,proto.fayment.FuturesArbitrageDTO.deserializeBinaryFromReader);
      msg.addTrades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fayment.FuturesArbitragesDTO.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fayment.FuturesArbitragesDTO.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fayment.FuturesArbitragesDTO} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fayment.FuturesArbitragesDTO.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fayment.FuturesArbitrageDTO.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FuturesArbitrageDTO trades = 1;
 * @return {!Array<!proto.fayment.FuturesArbitrageDTO>}
 */
proto.fayment.FuturesArbitragesDTO.prototype.getTradesList = function() {
  return /** @type{!Array<!proto.fayment.FuturesArbitrageDTO>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fayment.FuturesArbitrageDTO, 1));
};


/**
 * @param {!Array<!proto.fayment.FuturesArbitrageDTO>} value
 * @return {!proto.fayment.FuturesArbitragesDTO} returns this
*/
proto.fayment.FuturesArbitragesDTO.prototype.setTradesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fayment.FuturesArbitrageDTO=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fayment.FuturesArbitrageDTO}
 */
proto.fayment.FuturesArbitragesDTO.prototype.addTrades = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fayment.FuturesArbitrageDTO, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fayment.FuturesArbitragesDTO} returns this
 */
proto.fayment.FuturesArbitragesDTO.prototype.clearTradesList = function() {
  return this.setTradesList([]);
};


goog.object.extend(exports, proto.fayment);
